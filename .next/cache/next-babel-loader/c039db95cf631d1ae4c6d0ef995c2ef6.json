{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nimport { Potrace } from \"potrace\";\nimport SVGO from \"svgo\";\nimport Vibrant from \"node-vibrant\";\nimport sharp from \"sharp\";\nimport fs from \"fs\";\n\nconst temporaryStoreImage = (slug, resp) => new Promise((resolve, reject) => {\n  const fileStream = fs.createWriteStream(`/tmp/${slug}.png`);\n\n  if (!resp || !resp.body) {\n    reject(\"no body on fetch response\");\n  } else {\n    resp.body.pipe(fileStream);\n    fileStream.on(\"finish\", () => {\n      resolve();\n    });\n    fileStream.on(\"error\", err => {\n      reject(err);\n    });\n  }\n});\n\nconst removeTemporaryImage = slug => new Promise((resolve, reject) => {\n  if (fs.existsSync(`/tmp/${slug}.png`)) {\n    fs.unlink(`/tmp/${slug}.png`, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  }\n});\n\nfunction encodeSvgDataUri(svg) {\n  var uriPayload = encodeURIComponent(svg).replace(/%0A/g, \"\").replace(/%20/g, \" \").replace(/%3D/g, \"=\").replace(/%3A/g, \":\").replace(/%2F/g, \"/\").replace(/%22/g, \"'\");\n  return \"data:image/svg+xml,\" + uriPayload;\n}\n\nconst optimizeSvg = async svg => {\n  var svgo = new SVGO({\n    floatPrecision: 0\n  });\n  const result = await svgo.optimize(svg);\n  return result.data;\n};\n\nconst extractMostProminentColor = async filePath => {\n  var vibrant = new Vibrant(filePath);\n  const palette = await vibrant.getPalette();\n  let mostProminentColor = \"\";\n  let highestPopulation = 0;\n  let color = \"\";\n  let population = 0;\n  Object.keys(palette).forEach(function (key) {\n    if (palette[key] === null) {\n      return;\n    } // @ts-ignore\n\n\n    color = palette[key].getHex(); // @ts-ignore\n\n    population = palette[key].getPopulation();\n\n    if (population > highestPopulation) {\n      mostProminentColor = color;\n      highestPopulation = population;\n    }\n  });\n  return mostProminentColor;\n};\n\nfunction traceSvg(filePath, traceParams) {\n  return new Promise(function (resolve, reject) {\n    var trace = new Potrace(traceParams);\n    trace.loadImage(filePath, function (error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(trace.getSVG());\n      }\n    });\n  });\n}\n\nconst generateSVGTrace = async (slug, options = {}) => {\n  const traceParams = {\n    turnPolicy: options.turnPolicy ? Potrace[options.turnPolicy] : Potrace.TURNPOLICY_MINORITY,\n    turdSize: options.turdSize ? parseFloat(options.turdSize) : 100,\n    alphaMax: options.alphaMax ? parseFloat(options.alphaMax) : 1,\n    optCurve: options.optCurve ? options.optCurve : true,\n    optTolerance: options.optTolerance ? parseFloat(options.optTolerance) : 0.2,\n    threshold: options.threshold ? Potrace[options.threshold] || parseFloat(options.threshold) : Potrace.THRESHOLD_AUTO,\n    blackOnWhite: options.flipColors ? !options.flipColors : true,\n    background: options.background ? Potrace[options.background] || options.background : Potrace.COLOR_TRANSPARENT,\n    color: Potrace.COLOR_AUTO\n  };\n  const color = options.color ? Potrace[options.color] || options.color : Potrace.COLOR_AUTO;\n  const getFillColor = color === Potrace.COLOR_AUTO ? extractMostProminentColor(`/tmp/${slug}.png`) : Promise.resolve(color);\n  const fillColor = await getFillColor;\n  traceParams.color = fillColor;\n  const svg = await traceSvg(`/tmp/${slug}.png`, traceParams);\n  const optimizedSVG = await optimizeSvg(svg);\n  const encodedSVG = encodeSvgDataUri(optimizedSVG);\n  return encodedSVG;\n};\n\nconst convertImageToWebP = slug => new Promise((resolve, reject) => {\n  sharp(`/tmp/${slug}.png`).toFile(`${process.cwd()}/public/images/${slug}.webp`, (error, info) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(info);\n    }\n  });\n});\n\nconst getUnsplashImage = async photo => {\n  const resp = await fetch(`https://images.unsplash.com/${photo}?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80`);\n  await temporaryStoreImage(photo, resp);\n  await convertImageToWebP(photo);\n  const svg = await generateSVGTrace(photo);\n  await removeTemporaryImage(photo);\n  return {\n    svg,\n    webp: photo\n  };\n};\n\nexport default getUnsplashImage;","map":{"version":3,"sources":["/Users/willbunting/Documents/Github/with-image-preprocessing/lib/getUnsplashImage.js"],"names":["fetch","Potrace","SVGO","Vibrant","sharp","fs","temporaryStoreImage","slug","resp","Promise","resolve","reject","fileStream","createWriteStream","body","pipe","on","err","removeTemporaryImage","existsSync","unlink","encodeSvgDataUri","svg","uriPayload","encodeURIComponent","replace","optimizeSvg","svgo","floatPrecision","result","optimize","data","extractMostProminentColor","filePath","vibrant","palette","getPalette","mostProminentColor","highestPopulation","color","population","Object","keys","forEach","key","getHex","getPopulation","traceSvg","traceParams","trace","loadImage","error","getSVG","generateSVGTrace","options","turnPolicy","TURNPOLICY_MINORITY","turdSize","parseFloat","alphaMax","optCurve","optTolerance","threshold","THRESHOLD_AUTO","blackOnWhite","flipColors","background","COLOR_TRANSPARENT","COLOR_AUTO","getFillColor","fillColor","optimizedSVG","encodedSVG","convertImageToWebP","toFile","process","cwd","info","getUnsplashImage","photo","webp"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { Potrace } from \"potrace\";\nimport SVGO from \"svgo\";\nimport Vibrant from \"node-vibrant\";\nimport sharp from \"sharp\";\nimport fs from \"fs\";\n\nconst temporaryStoreImage = (slug, resp) =>\n  new Promise((resolve, reject) => {\n    const fileStream = fs.createWriteStream(`/tmp/${slug}.png`);\n    if (!resp || !resp.body) {\n      reject(\"no body on fetch response\");\n    } else {\n      resp.body.pipe(fileStream);\n      fileStream.on(\"finish\", () => {\n        resolve();\n      });\n      fileStream.on(\"error\", err => {\n        reject(err);\n      });\n    }\n  });\n\nconst removeTemporaryImage = slug =>\n  new Promise((resolve, reject) => {\n    if (fs.existsSync(`/tmp/${slug}.png`)) {\n      fs.unlink(`/tmp/${slug}.png`, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    }\n  });\n\nfunction encodeSvgDataUri(svg) {\n  var uriPayload = encodeURIComponent(svg)\n    .replace(/%0A/g, \"\")\n    .replace(/%20/g, \" \")\n    .replace(/%3D/g, \"=\")\n    .replace(/%3A/g, \":\")\n    .replace(/%2F/g, \"/\")\n    .replace(/%22/g, \"'\");\n\n  return \"data:image/svg+xml,\" + uriPayload;\n}\n\nconst optimizeSvg = async svg => {\n  var svgo = new SVGO({ floatPrecision: 0 });\n  const result = await svgo.optimize(svg);\n  return result.data;\n};\n\nconst extractMostProminentColor = async filePath => {\n  var vibrant = new Vibrant(filePath);\n  const palette = await vibrant.getPalette();\n  let mostProminentColor = \"\";\n  let highestPopulation = 0;\n  let color = \"\";\n  let population = 0;\n\n  Object.keys(palette).forEach(function(key) {\n    if (palette[key] === null) {\n      return;\n    }\n\n    // @ts-ignore\n    color = palette[key].getHex();\n    // @ts-ignore\n    population = palette[key].getPopulation();\n\n    if (population > highestPopulation) {\n      mostProminentColor = color;\n      highestPopulation = population;\n    }\n  });\n\n  return mostProminentColor;\n};\n\nfunction traceSvg(filePath, traceParams) {\n  return new Promise(function(resolve, reject) {\n    var trace = new Potrace(traceParams);\n\n    trace.loadImage(filePath, function(error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(trace.getSVG());\n      }\n    });\n  });\n}\n\nconst generateSVGTrace = async (slug, options = {}) => {\n  const traceParams = {\n    turnPolicy: options.turnPolicy\n      ? Potrace[options.turnPolicy]\n      : Potrace.TURNPOLICY_MINORITY,\n    turdSize: options.turdSize ? parseFloat(options.turdSize) : 100,\n    alphaMax: options.alphaMax ? parseFloat(options.alphaMax) : 1,\n    optCurve: options.optCurve ? options.optCurve : true,\n    optTolerance: options.optTolerance ? parseFloat(options.optTolerance) : 0.2,\n    threshold: options.threshold\n      ? Potrace[options.threshold] || parseFloat(options.threshold)\n      : Potrace.THRESHOLD_AUTO,\n    blackOnWhite: options.flipColors ? !options.flipColors : true,\n    background: options.background\n      ? Potrace[options.background] || options.background\n      : Potrace.COLOR_TRANSPARENT,\n    color: Potrace.COLOR_AUTO\n  };\n\n  const color = options.color\n    ? Potrace[options.color] || options.color\n    : Potrace.COLOR_AUTO;\n\n  const getFillColor =\n    color === Potrace.COLOR_AUTO\n      ? extractMostProminentColor(`/tmp/${slug}.png`)\n      : Promise.resolve(color);\n\n  const fillColor = await getFillColor;\n  traceParams.color = fillColor;\n\n  const svg = await traceSvg(`/tmp/${slug}.png`, traceParams);\n  const optimizedSVG = await optimizeSvg(svg);\n  const encodedSVG = encodeSvgDataUri(optimizedSVG);\n\n  return encodedSVG;\n};\n\nconst convertImageToWebP = slug =>\n  new Promise((resolve, reject) => {\n    sharp(`/tmp/${slug}.png`).toFile(\n      `${process.cwd()}/public/images/${slug}.webp`,\n      (error, info) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(info);\n        }\n      }\n    );\n  });\n\nconst getUnsplashImage = async photo => {\n  const resp = await fetch(\n    `https://images.unsplash.com/${photo}?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80`\n  );\n\n  await temporaryStoreImage(photo, resp);\n  await convertImageToWebP(photo);\n  const svg = await generateSVGTrace(photo);\n  await removeTemporaryImage(photo);\n\n  return {\n    svg,\n    webp: photo\n  };\n};\n\nexport default getUnsplashImage;\n"]},"metadata":{},"sourceType":"module"}